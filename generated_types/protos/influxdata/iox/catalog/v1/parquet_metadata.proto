syntax = "proto3";
package influxdata.iox.catalog.v1;

// Timestamp similar to the Google version but w/ fixed-sized integers.
//
// This is helpful for deterministic outputs.
message FixedSizeTimestamp {
  sfixed64 seconds = 1;
  sfixed32 nanos = 2;
}

// IOx-specific metadata that will be serialized into the file-level key-value Parquet metadata under a single key.
message IoxMetadata {
  // Metadata format version.
  uint32 version = 1;

  // Timestamp when this file was created.
  FixedSizeTimestamp creation_timestamp = 2;

  // Table that holds this parquet file.
  string table_name = 3;

  // Partition key of the partition that holds this parquet file.
  string partition_key = 4;

  // Chunk ID.
  uint32 chunk_id = 5;

  // Partition checkpoint with pre-split data for the in this file.
  PartitionCheckpoint partition_checkpoint = 6;

  // Database checkpoint created at the time of the write.
  DatabaseCheckpoint database_checkpoint = 7;
}

// Partition checkpoint.
//
// Note that a partition checkpoint belongs to a single partition (via table name and partition key). Since this
// checkpoint is usually serialized as part of `IoxMetadata`, the partition information is NOT repeated as part of this
// message.
message PartitionCheckpoint {
  // Maps `sequencer_id` to the to-be-persisted minimum and seen maximum sequence numbers.
  map<uint32, OptionalMinMaxSequence> sequencer_numbers = 1;

  // Minimum unpersisted timestamp.
  FixedSizeTimestamp min_unpersisted_timestamp = 2;
}

// Record of the playback state for the whole database.
//
// This effectively contains the minimum sequence numbers over the whole database that are the starting point for
// replay.
message DatabaseCheckpoint {
  // was `min_sequence_numbers`
  reserved 1;

  // Maps `sequencer_id` to the to-be-persisted minimum and seen maximum sequence numbers.
  map<uint32, OptionalMinMaxSequence> sequencer_numbers = 2;
}

// An optional uint64.
message OptionalUint64 {
  uint64 value = 1;
}

// The optional to-be-replayed minimum and seen maximum sequence numbers for a given sequencer.
//
// If the minimum value is missing, no replay is required for this sequencer.
message OptionalMinMaxSequence {
  OptionalUint64 min = 1;
  uint64 max = 2;
}
